import os
import pandas as pd
import logging

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s',
                    handlers=[
                        logging.FileHandler('city_data_processing.log', mode='w'),
                        logging.StreamHandler()
                    ])

input_folder = r'A_daily_mean_eachcity_new'
output_folder_thresholds = r'B_Thershold_eachcity'  
output_folder_days = r'C_days_eachcity'

if not os.path.exists(output_folder_days):
    os.makedirs(output_folder_days)

for city_file in os.listdir(input_folder):
    if city_file.endswith('.csv'):
        city_name = city_file.split('_air')[0]
        file_path = os.path.join(input_folder, city_file)

        logging.info(f"正在处理城市: {city_name}")

        city_data = pd.read_csv(file_path, parse_dates=['date'])

        thresholds_file = os.path.join(output_folder_thresholds, f'{city_name}_percentiles.csv')
        if not os.path.exists(thresholds_file):
            logging.warning(f"{thresholds_file} 文件不存在，跳过 {city_name}")
            continue

        thresholds_data = pd.read_csv(thresholds_file)

        if 'date' in thresholds_data.columns:
            thresholds_data['date'] = thresholds_data['date'].astype(str)

        city_data_filtered = city_data[
            (city_data['date'].dt.month >= 5) & (city_data['date'].dt.month <= 9)
        ]

        result_data = []

        for year in range(1981, 2023 + 1):
            yearly_data = city_data_filtered[city_data_filtered['date'].dt.year == year]

            temp_above_90 = 0
            temp_below_10 = 0
            humidity_above_90 = 0
            humidity_below_10 = 0
            temp_humidity_above_90 = 0
            temp_above_90_humidity_below_10 = 0
            for i, row in yearly_data.iterrows():
                day = row['date'].strftime('%m-%d')  
                threshold = thresholds_data[thresholds_data['date'] == day]

                if threshold.empty:
                    logging.warning(f"{city_name} 在 {row['date']} 没有找到对应的阈值，跳过该天。")
                    continue

                temp_90th = threshold['temperature_90th_percentile'].values[0]
                temp_10th = threshold['temperature_10th_percentile'].values[0]
                humidity_90th = threshold['humidity_90th_percentile'].values[0]
                humidity_10th = threshold['humidity_10th_percentile'].values[0]

                if row['average_temperature'] > temp_90th:
                    temp_above_90 += 1
                if row['average_temperature'] < temp_10th:
                    temp_below_10 += 1

                if row['average_specific_humidity'] > humidity_90th:
                    humidity_above_90 += 1
                if row['average_specific_humidity'] < humidity_10th:
                    humidity_below_10 += 1

                if (row['average_temperature'] > temp_90th) and (row['average_specific_humidity'] > humidity_90th):
                    temp_humidity_above_90 += 1

                if (row['average_temperature'] > temp_90th) and (row['average_specific_humidity'] < humidity_10th):
                    temp_above_90_humidity_below_10 += 1

            result_data.append({
                'year': year,
                'temp_above_90': temp_above_90,
                'temp_below_10': temp_below_10,
                'humidity_above_90': humidity_above_90,
                'humidity_below_10': humidity_below_10,
                'temp_humidity_above_90': temp_humidity_above_90,
                'temp_above_90_humidity_below_10': temp_above_90_humidity_below_10
            })

        output_file_path = os.path.join(output_folder_days, f'{city_name}_days_above_below_percentiles.csv')
        result_df = pd.DataFrame(result_data)
        result_df.to_csv(output_file_path, index=False)
        logging.info(f'{city_name} 的天数统计已保存到 {output_file_path}')

logging.info("a")
